
1. Connect to database (type/paste in powershell or any onter command line):
    mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/databaseName"

2. Check to which database you are connected:
    db

3. Show available databases:
    show dbs

4. Change database:
    use databaseName

5. Show collections:
    show collections

6. How to use queries/find:
    db.collectionName.find({"field": "value"})
    for example: db.zips.find({"state": "NY"})

7. To see more readable result:
    db.collectionName.find({"field": "value"}).pretty()

8. How many documents in collection:
    db.collectionName.find({"field": "value"}).count()

9. Iterate through the cursor result (how to see more results):
    it

10. Get a random document from a collection:
    db.collectionName.findOne()
    for example: db.inspections.findOne()

11. Insert a ducment into a collection:
    db.collectionName.insert({
        "_id" : ObjectId("56d61033a378eccde8a8354f"),
        "field" : "value",
        ...
        }
    })

12. Inserting multiple documents at one time:
    db.collectionName.insert([{"field": value}, {"field": value}, {"field": value} ])
    for example db.inspections.insert([{"test" : 1 }, {"test" : 2 }, {"test" : 3 }])

    The moment that there is an error in inserting this way (in most cases duplicate error) the inserting function stops, and
    the remaining documents are not inserted.

13. Insert multiple documents not in order that they are listed:
    db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 }, { "_id": 3, "test": 3 }], { "ordered": false })

    The moment that there is an error in inserting this way (in most cases duplicate error) the inserting continues, and only the documents
    that are causing errors are omitted.
    
 14. Updating many documents:
    db.collectionName.updateMany({"field_to_query": "value"}, {"$inc": {"field_to_update": value, "field_to_update_2": value, ...}})
    for example: db.zips.updateMany({"city": "HUDSON"}, {"$inc": {"pop": 10}})

    "$inc" increments the value of the field by given amount

15. Update one document:
    db.collectionName.updateOne({"field_to_query": "value"}, { "$set": {"field_to_update": value}})
    for example: 
        db.zips.updateOne({"zip": "77003"}, { "$set": {"pop": 17630}})
        db.grades.updateOne(
            { "student_id": 250, "class_id": 339 },
            {"$push": { "scores": { "type": "extra credit", score": 100 }}})

    "$set" set the chosen field to given value, if the field doesn't exists, the field is added to the document
    "$push" adds an element to an array field